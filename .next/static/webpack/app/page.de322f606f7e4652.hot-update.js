"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/uniswap/graph.ts":
/*!******************************!*\
  !*** ./src/uniswap/graph.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUniswapV3Pools: function() { return /* binding */ getUniswapV3Pools; }\n/* harmony export */ });\n/* harmony import */ var _lib_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/network */ \"(app-pages-browser)/./src/lib/network.ts\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ \"(app-pages-browser)/./src/uniswap/helper.ts\");\n\n\n// private helper functions\nconst _query = async (endpoint, query)=>{\n    const resp = await fetch(endpoint, {\n        method: \"POST\",\n        body: JSON.stringify({\n            query\n        })\n    });\n    if (resp.status !== 200) {\n        throw new Error(\"invalid response status: \" + resp.status);\n    }\n    const data = await resp.json();\n    const errors = data.errors;\n    if (errors && errors.length > 0) {\n        console.error(\"Uniswap Subgraph Errors\", {\n            errors,\n            query\n        });\n        throw new Error(\"Uniswap Subgraph Errors: \".concat(JSON.stringify(errors)));\n    }\n    return data.data;\n};\nconst _processTokenInfo = (token)=>{\n    token.logoURI = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.getTokenLogoURL)(token.id);\n    // TODO: check the network id before replace the token name\n    if (token.name === \"Wrapped Ether\" || token.name === \"Wrapped Ethereum\") {\n        token.name = \"Ethereum\";\n        token.symbol = \"ETH\";\n        token.logoURI = \"https://cdn.iconscout.com/icon/free/png-128/ethereum-2752194-2285011.png\";\n    }\n    if (token.name === \"Wrapped Matic\") {\n        token.name = \"Polygon Native Token\";\n        token.symbol = \"MATIC\";\n    }\n    if (token.name === \"Wrapped BNB\") {\n        token.name = \"BSC Native Token\";\n        token.symbol = \"BNB\";\n    }\n    return token;\n};\nconst getBulkTokens = async (endpoint, tokenAddresses)=>{\n    const res = await _query(endpoint, \"{\\n      tokens(where: {id_in: [\".concat(tokenAddresses.map((id)=>'\"'.concat(id, '\"')).join(\",\"), \"]}) {\\n        id\\n        name\\n        symbol\\n        volumeUSD\\n        decimals\\n        totalValueLockedUSD\\n        tokenDayData(first: 1, orderBy: date, orderDirection: desc) {\\n          priceUSD\\n        }\\n      }\\n    }\"));\n    if (res.tokens !== null) {\n        res.tokens = res.tokens.map(_processTokenInfo);\n    }\n    return res.tokens;\n};\nconst processPools = async (endpoint, pools)=>{\n    const tokenIds = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.getUniqueItems)(pools.reduce((acc, p)=>[\n            ...acc,\n            p.token0.id,\n            p.token1.id\n        ], []));\n    const queryPage = Math.ceil(tokenIds.length / 100);\n    // batch query getBulkTokens function by page using Promise.all\n    const tokens = await Promise.all(Array.from({\n        length: queryPage\n    }, (_, i)=>{\n        const start = i * 100;\n        const end = start + 100;\n        return getBulkTokens(endpoint, tokenIds.slice(start, end));\n    })).then((res)=>res.flat());\n    // sort token by volume\n    tokens.sort((a, b)=>Number(b.volumeUSD) - Number(a.volumeUSD));\n    // map poolCount\n    const poolCountByTokenId = pools.reduce((acc, p)=>{\n        acc[p.token0.id] = (acc[p.token0.id] || 0) + 1;\n        acc[p.token1.id] = (acc[p.token1.id] || 0) + 1;\n        return acc;\n    }, {});\n    const _tokens = tokens.map((t)=>{\n        return {\n            ...t,\n            poolCount: poolCountByTokenId[t.id]\n        };\n    });\n    // create hashmap of tokens id\n    const tokenMap = _tokens.reduce((acc, t)=>{\n        acc[t.id] = t;\n        return acc;\n    }, {});\n    const npools = pools.map((p)=>{\n        return {\n            ...p,\n            token0: tokenMap[p.token0.id],\n            token1: tokenMap[p.token1.id]\n        };\n    });\n    return {\n        pools: npools,\n        tokens\n    };\n};\n// get uniswap v3 pools\nconst getUniswapV3Pools = async (param)=>{\n    let { chainId, take, tvlUSD_gte, volUSD_gte } = param;\n    chainId = chainId || 1;\n    take = take || 1000; // fir\n    const endpoint = (0,_lib_network__WEBPACK_IMPORTED_MODULE_0__.getNetworkEndpoint)(chainId);\n    try {\n        const res = await _query(endpoint, \"{\\n        pools (first: \".concat(take, \", orderBy: totalValueLockedUSD, orderDirection: desc, where: {liquidity_gt: 0, totalValueLockedUSD_gte: \").concat(tvlUSD_gte, \", volumeUSD_gte: \").concat(volUSD_gte, \"}) {\\n          id\\n          token0 {\\n            id\\n          }\\n          token1 {\\n            id\\n          }\\n          feeTier\\n          liquidity\\n          tick\\n          sqrtPrice\\n          volumeUSD\\n          totalValueLockedUSD\\n          createdAtTimestamp\\n        }\\n      }\"));\n        if (!res || res.length === 0) {\n            return {\n                pools: [],\n                tokens: []\n            };\n        }\n        return processPools(endpoint, res.pools);\n    } catch (err) {\n        return {\n            pools: [],\n            tokens: []\n        };\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/uniswap/graph.ts\n"));

/***/ })

});