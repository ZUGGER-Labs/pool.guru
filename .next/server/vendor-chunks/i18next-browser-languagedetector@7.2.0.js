"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next-browser-languagedetector@7.2.0";
exports.ids = ["vendor-chunks/i18next-browser-languagedetector@7.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/i18next-browser-languagedetector@7.2.0/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/i18next-browser-languagedetector@7.2.0/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Browser)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"(ssr)/./node_modules/.pnpm/@babel+runtime@7.23.8/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"(ssr)/./node_modules/.pnpm/@babel+runtime@7.23.8/node_modules/@babel/runtime/helpers/esm/createClass.js\");\n\n\nvar arr = [];\nvar each = arr.forEach;\nvar slice = arr.slice;\nfunction defaults(obj) {\n    each.call(slice.call(arguments, 1), function(source) {\n        if (source) {\n            for(var prop in source){\n                if (obj[prop] === undefined) obj[prop] = source[prop];\n            }\n        }\n    });\n    return obj;\n}\n// eslint-disable-next-line no-control-regex\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nvar serializeCookie = function serializeCookie(name, val, options) {\n    var opt = options || {};\n    opt.path = opt.path || \"/\";\n    var value = encodeURIComponent(val);\n    var str = \"\".concat(name, \"=\").concat(value);\n    if (opt.maxAge > 0) {\n        var maxAge = opt.maxAge - 0;\n        if (Number.isNaN(maxAge)) throw new Error(\"maxAge should be a Number\");\n        str += \"; Max-Age=\".concat(Math.floor(maxAge));\n    }\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError(\"option domain is invalid\");\n        }\n        str += \"; Domain=\".concat(opt.domain);\n    }\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError(\"option path is invalid\");\n        }\n        str += \"; Path=\".concat(opt.path);\n    }\n    if (opt.expires) {\n        if (typeof opt.expires.toUTCString !== \"function\") {\n            throw new TypeError(\"option expires is invalid\");\n        }\n        str += \"; Expires=\".concat(opt.expires.toUTCString());\n    }\n    if (opt.httpOnly) str += \"; HttpOnly\";\n    if (opt.secure) str += \"; Secure\";\n    if (opt.sameSite) {\n        var sameSite = typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n        switch(sameSite){\n            case true:\n                str += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                str += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                str += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                str += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n    return str;\n};\nvar cookie = {\n    create: function create(name, value, minutes, domain) {\n        var cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n            path: \"/\",\n            sameSite: \"strict\"\n        };\n        if (minutes) {\n            cookieOptions.expires = new Date();\n            cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1000);\n        }\n        if (domain) cookieOptions.domain = domain;\n        document.cookie = serializeCookie(name, encodeURIComponent(value), cookieOptions);\n    },\n    read: function read(name) {\n        var nameEQ = \"\".concat(name, \"=\");\n        var ca = document.cookie.split(\";\");\n        for(var i = 0; i < ca.length; i++){\n            var c = ca[i];\n            while(c.charAt(0) === \" \")c = c.substring(1, c.length);\n            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n        }\n        return null;\n    },\n    remove: function remove(name) {\n        this.create(name, \"\", -1);\n    }\n};\nvar cookie$1 = {\n    name: \"cookie\",\n    lookup: function lookup(options) {\n        var found;\n        if (options.lookupCookie && typeof document !== \"undefined\") {\n            var c = cookie.read(options.lookupCookie);\n            if (c) found = c;\n        }\n        return found;\n    },\n    cacheUserLanguage: function cacheUserLanguage(lng, options) {\n        if (options.lookupCookie && typeof document !== \"undefined\") {\n            cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);\n        }\n    }\n};\nvar querystring = {\n    name: \"querystring\",\n    lookup: function lookup(options) {\n        var found;\n        if (false) { var key, pos, i, params, query, search; }\n        return found;\n    }\n};\nvar hasLocalStorageSupport = null;\nvar localStorageAvailable = function localStorageAvailable() {\n    if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;\n    try {\n        hasLocalStorageSupport = window !== \"undefined\" && window.localStorage !== null;\n        var testKey = \"i18next.translate.boo\";\n        window.localStorage.setItem(testKey, \"foo\");\n        window.localStorage.removeItem(testKey);\n    } catch (e) {\n        hasLocalStorageSupport = false;\n    }\n    return hasLocalStorageSupport;\n};\nvar localStorage = {\n    name: \"localStorage\",\n    lookup: function lookup(options) {\n        var found;\n        if (options.lookupLocalStorage && localStorageAvailable()) {\n            var lng = window.localStorage.getItem(options.lookupLocalStorage);\n            if (lng) found = lng;\n        }\n        return found;\n    },\n    cacheUserLanguage: function cacheUserLanguage(lng, options) {\n        if (options.lookupLocalStorage && localStorageAvailable()) {\n            window.localStorage.setItem(options.lookupLocalStorage, lng);\n        }\n    }\n};\nvar hasSessionStorageSupport = null;\nvar sessionStorageAvailable = function sessionStorageAvailable() {\n    if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;\n    try {\n        hasSessionStorageSupport = window !== \"undefined\" && window.sessionStorage !== null;\n        var testKey = \"i18next.translate.boo\";\n        window.sessionStorage.setItem(testKey, \"foo\");\n        window.sessionStorage.removeItem(testKey);\n    } catch (e) {\n        hasSessionStorageSupport = false;\n    }\n    return hasSessionStorageSupport;\n};\nvar sessionStorage = {\n    name: \"sessionStorage\",\n    lookup: function lookup(options) {\n        var found;\n        if (options.lookupSessionStorage && sessionStorageAvailable()) {\n            var lng = window.sessionStorage.getItem(options.lookupSessionStorage);\n            if (lng) found = lng;\n        }\n        return found;\n    },\n    cacheUserLanguage: function cacheUserLanguage(lng, options) {\n        if (options.lookupSessionStorage && sessionStorageAvailable()) {\n            window.sessionStorage.setItem(options.lookupSessionStorage, lng);\n        }\n    }\n};\nvar navigator$1 = {\n    name: \"navigator\",\n    lookup: function lookup(options) {\n        var found = [];\n        if (typeof navigator !== \"undefined\") {\n            if (navigator.languages) {\n                // chrome only; not an array, so can't use .push.apply instead of iterating\n                for(var i = 0; i < navigator.languages.length; i++){\n                    found.push(navigator.languages[i]);\n                }\n            }\n            if (navigator.userLanguage) {\n                found.push(navigator.userLanguage);\n            }\n            if (navigator.language) {\n                found.push(navigator.language);\n            }\n        }\n        return found.length > 0 ? found : undefined;\n    }\n};\nvar htmlTag = {\n    name: \"htmlTag\",\n    lookup: function lookup(options) {\n        var found;\n        var htmlTag = options.htmlTag || (typeof document !== \"undefined\" ? document.documentElement : null);\n        if (htmlTag && typeof htmlTag.getAttribute === \"function\") {\n            found = htmlTag.getAttribute(\"lang\");\n        }\n        return found;\n    }\n};\nvar path = {\n    name: \"path\",\n    lookup: function lookup(options) {\n        var found;\n        if (false) { var language; }\n        return found;\n    }\n};\nvar subdomain = {\n    name: \"subdomain\",\n    lookup: function lookup(options) {\n        // If given get the subdomain index else 1\n        var lookupFromSubdomainIndex = typeof options.lookupFromSubdomainIndex === \"number\" ? options.lookupFromSubdomainIndex + 1 : 1;\n        // get all matches if window.location. is existing\n        // first item of match is the match itself and the second is the first group macht which sould be the first subdomain match\n        // is the hostname no public domain get the or option of localhost\n        var language =  false && 0;\n        // if there is no match (null) return undefined\n        if (!language) return undefined;\n        // return the given group match\n        return language[lookupFromSubdomainIndex];\n    }\n};\nfunction getDefaults() {\n    return {\n        order: [\n            \"querystring\",\n            \"cookie\",\n            \"localStorage\",\n            \"sessionStorage\",\n            \"navigator\",\n            \"htmlTag\"\n        ],\n        lookupQuerystring: \"lng\",\n        lookupCookie: \"i18next\",\n        lookupLocalStorage: \"i18nextLng\",\n        lookupSessionStorage: \"i18nextLng\",\n        // cache user language\n        caches: [\n            \"localStorage\"\n        ],\n        excludeCacheFor: [\n            \"cimode\"\n        ],\n        // cookieMinutes: 10,\n        // cookieDomain: 'myDomain'\n        convertDetectedLanguage: function convertDetectedLanguage(l) {\n            return l;\n        }\n    };\n}\nvar Browser = /*#__PURE__*/ function() {\n    function Browser(services) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Browser);\n        this.type = \"languageDetector\";\n        this.detectors = {};\n        this.init(services, options);\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Browser, [\n        {\n            key: \"init\",\n            value: function init(services) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                this.services = services || {\n                    languageUtils: {}\n                }; // this way the language detector can be used without i18next\n                this.options = defaults(options, this.options || {}, getDefaults());\n                if (typeof this.options.convertDetectedLanguage === \"string\" && this.options.convertDetectedLanguage.indexOf(\"15897\") > -1) {\n                    this.options.convertDetectedLanguage = function(l) {\n                        return l.replace(\"-\", \"_\");\n                    };\n                }\n                // backwards compatibility\n                if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;\n                this.i18nOptions = i18nOptions;\n                this.addDetector(cookie$1);\n                this.addDetector(querystring);\n                this.addDetector(localStorage);\n                this.addDetector(sessionStorage);\n                this.addDetector(navigator$1);\n                this.addDetector(htmlTag);\n                this.addDetector(path);\n                this.addDetector(subdomain);\n            }\n        },\n        {\n            key: \"addDetector\",\n            value: function addDetector(detector) {\n                this.detectors[detector.name] = detector;\n            }\n        },\n        {\n            key: \"detect\",\n            value: function detect(detectionOrder) {\n                var _this = this;\n                if (!detectionOrder) detectionOrder = this.options.order;\n                var detected = [];\n                detectionOrder.forEach(function(detectorName) {\n                    if (_this.detectors[detectorName]) {\n                        var lookup = _this.detectors[detectorName].lookup(_this.options);\n                        if (lookup && typeof lookup === \"string\") lookup = [\n                            lookup\n                        ];\n                        if (lookup) detected = detected.concat(lookup);\n                    }\n                });\n                detected = detected.map(function(d) {\n                    return _this.options.convertDetectedLanguage(d);\n                });\n                if (this.services.languageUtils.getBestMatchFromCodes) return detected; // new i18next v19.5.0\n                return detected.length > 0 ? detected[0] : null; // a little backward compatibility\n            }\n        },\n        {\n            key: \"cacheUserLanguage\",\n            value: function cacheUserLanguage(lng, caches) {\n                var _this2 = this;\n                if (!caches) caches = this.options.caches;\n                if (!caches) return;\n                if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;\n                caches.forEach(function(cacheName) {\n                    if (_this2.detectors[cacheName]) _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);\n                });\n            }\n        }\n    ]);\n    return Browser;\n}();\nBrowser.type = \"languageDetector\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/i18next-browser-languagedetector@7.2.0/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js\n");

/***/ })

};
;