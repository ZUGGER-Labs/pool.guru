/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/numbro@2.4.0";
exports.ids = ["vendor-chunks/numbro@2.4.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/numbro@2.4.0/node_modules/numbro/dist/numbro.min.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/numbro@2.4.0/node_modules/numbro/dist/numbro.min.js ***!
  \********************************************************************************/
/***/ (function(module) {

eval("!function(e, t) {\n     true ? module.exports = t() : 0;\n}(this, function() {\n    \"use strict\";\n    var e = \"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\n    function t(e) {\n        return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n    }\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ var r, n, i, a, o = {\n        languageTag: \"en-US\",\n        delimiters: {\n            thousands: \",\",\n            decimal: \".\"\n        },\n        abbreviations: {\n            thousand: \"k\",\n            million: \"m\",\n            billion: \"b\",\n            trillion: \"t\"\n        },\n        spaceSeparated: !1,\n        ordinal: function(e) {\n            let t = e % 10;\n            return 1 == ~~(e % 100 / 10) ? \"th\" : 1 === t ? \"st\" : 2 === t ? \"nd\" : 3 === t ? \"rd\" : \"th\";\n        },\n        bytes: {\n            binarySuffixes: [\n                \"B\",\n                \"KiB\",\n                \"MiB\",\n                \"GiB\",\n                \"TiB\",\n                \"PiB\",\n                \"EiB\",\n                \"ZiB\",\n                \"YiB\"\n            ],\n            decimalSuffixes: [\n                \"B\",\n                \"KB\",\n                \"MB\",\n                \"GB\",\n                \"TB\",\n                \"PB\",\n                \"EB\",\n                \"ZB\",\n                \"YB\"\n            ]\n        },\n        currency: {\n            symbol: \"$\",\n            position: \"prefix\",\n            code: \"USD\"\n        },\n        currencyFormat: {\n            thousandSeparated: !0,\n            totalLength: 4,\n            spaceSeparated: !0,\n            spaceSeparatedCurrency: !0\n        },\n        formats: {\n            fourDigits: {\n                totalLength: 4,\n                spaceSeparated: !0\n            },\n            fullWithTwoDecimals: {\n                output: \"currency\",\n                thousandSeparated: !0,\n                mantissa: 2\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                thousandSeparated: !0,\n                mantissa: 2\n            },\n            fullWithNoDecimals: {\n                output: \"currency\",\n                thousandSeparated: !0,\n                mantissa: 0\n            }\n        }\n    };\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ function u() {\n        if (n) return r;\n        n = 1;\n        const e = [\n            {\n                key: \"ZiB\",\n                factor: Math.pow(1024, 7)\n            },\n            {\n                key: \"ZB\",\n                factor: Math.pow(1e3, 7)\n            },\n            {\n                key: \"YiB\",\n                factor: Math.pow(1024, 8)\n            },\n            {\n                key: \"YB\",\n                factor: Math.pow(1e3, 8)\n            },\n            {\n                key: \"TiB\",\n                factor: Math.pow(1024, 4)\n            },\n            {\n                key: \"TB\",\n                factor: Math.pow(1e3, 4)\n            },\n            {\n                key: \"PiB\",\n                factor: Math.pow(1024, 5)\n            },\n            {\n                key: \"PB\",\n                factor: Math.pow(1e3, 5)\n            },\n            {\n                key: \"MiB\",\n                factor: Math.pow(1024, 2)\n            },\n            {\n                key: \"MB\",\n                factor: Math.pow(1e3, 2)\n            },\n            {\n                key: \"KiB\",\n                factor: Math.pow(1024, 1)\n            },\n            {\n                key: \"KB\",\n                factor: Math.pow(1e3, 1)\n            },\n            {\n                key: \"GiB\",\n                factor: Math.pow(1024, 3)\n            },\n            {\n                key: \"GB\",\n                factor: Math.pow(1e3, 3)\n            },\n            {\n                key: \"EiB\",\n                factor: Math.pow(1024, 6)\n            },\n            {\n                key: \"EB\",\n                factor: Math.pow(1e3, 6)\n            },\n            {\n                key: \"B\",\n                factor: 1\n            }\n        ];\n        function t(e) {\n            return e.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n        }\n        function i(r, n, a, o, u, s, l) {\n            if (!isNaN(+r)) return +r;\n            let c = \"\", f = r.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n            if (f !== r) return -1 * i(f, n, a, o, u, s);\n            for(let t = 0; t < e.length; t++){\n                let l = e[t];\n                if (c = r.replace(RegExp(`([0-9 ])(${l.key})$`), \"$1\"), c !== r) return i(c, n, a, o, u, s) * l.factor;\n            }\n            if (c = r.replace(\"%\", \"\"), c !== r) return i(c, n, a, o, u, s) / 100;\n            let p = parseFloat(r);\n            if (isNaN(p)) return;\n            let g = o(p);\n            if (g && \".\" !== g && (c = r.replace(new RegExp(`${t(g)}$`), \"\"), c !== r)) return i(c, n, a, o, u, s);\n            let h = {};\n            Object.keys(s).forEach((e)=>{\n                h[s[e]] = e;\n            });\n            let d = Object.keys(h).sort().reverse(), m = d.length;\n            for(let e = 0; e < m; e++){\n                let t = d[e], l = h[t];\n                if (c = r.replace(t, \"\"), c !== r) {\n                    let e;\n                    switch(l){\n                        case \"thousand\":\n                            e = Math.pow(10, 3);\n                            break;\n                        case \"million\":\n                            e = Math.pow(10, 6);\n                            break;\n                        case \"billion\":\n                            e = Math.pow(10, 9);\n                            break;\n                        case \"trillion\":\n                            e = Math.pow(10, 12);\n                    }\n                    return i(c, n, a, o, u, s) * e;\n                }\n            }\n        }\n        function a(e, r, n = \"\", a, o, u, s) {\n            if (\"\" === e) return;\n            if (e === o) return 0;\n            let l = function(e, r, n) {\n                let i = e.replace(n, \"\");\n                return i = i.replace(new RegExp(`([0-9])${t(r.thousands)}([0-9])`, \"g\"), \"$1$2\"), i = i.replace(r.decimal, \".\"), i;\n            }(e, r, n);\n            return i(l, r, n, a, o, u);\n        }\n        return r = {\n            unformat: function(e, t) {\n                const r = p();\n                let n, i = r.currentDelimiters(), o = r.currentCurrency().symbol, u = r.currentOrdinal(), s = r.getZeroFormat(), l = r.currentAbbreviations();\n                if (\"string\" == typeof e) n = function(e, t) {\n                    if (!e.indexOf(\":\") || \":\" === t.thousands) return !1;\n                    let r = e.split(\":\");\n                    if (3 !== r.length) return !1;\n                    let n = +r[0], i = +r[1], a = +r[2];\n                    return !isNaN(n) && !isNaN(i) && !isNaN(a);\n                }(e, i) ? function(e) {\n                    let t = e.split(\":\"), r = +t[0], n = +t[1];\n                    return +t[2] + 60 * n + 3600 * r;\n                }(e) : a(e, i, o, u, s, l);\n                else {\n                    if (\"number\" != typeof e) return;\n                    n = e;\n                }\n                if (void 0 !== n) return n;\n            }\n        }, r;\n    }\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ function s() {\n        if (a) return i;\n        a = 1;\n        let e = u();\n        const t = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/, r = {\n            output: {\n                type: \"string\",\n                validValues: [\n                    \"currency\",\n                    \"percent\",\n                    \"byte\",\n                    \"time\",\n                    \"ordinal\",\n                    \"number\"\n                ]\n            },\n            base: {\n                type: \"string\",\n                validValues: [\n                    \"decimal\",\n                    \"binary\",\n                    \"general\"\n                ],\n                restriction: (e, t)=>\"byte\" === t.output,\n                message: \"`base` must be provided only when the output is `byte`\",\n                mandatory: (e)=>\"byte\" === e.output\n            },\n            characteristic: {\n                type: \"number\",\n                restriction: (e)=>e >= 0,\n                message: \"value must be positive\"\n            },\n            prefix: \"string\",\n            postfix: \"string\",\n            forceAverage: {\n                type: \"string\",\n                validValues: [\n                    \"trillion\",\n                    \"billion\",\n                    \"million\",\n                    \"thousand\"\n                ]\n            },\n            average: \"boolean\",\n            lowPrecision: {\n                type: \"boolean\",\n                restriction: (e, t)=>!0 === t.average,\n                message: \"`lowPrecision` must be provided only when the option `average` is set\"\n            },\n            currencyPosition: {\n                type: \"string\",\n                validValues: [\n                    \"prefix\",\n                    \"infix\",\n                    \"postfix\"\n                ]\n            },\n            currencySymbol: \"string\",\n            totalLength: {\n                type: \"number\",\n                restrictions: [\n                    {\n                        restriction: (e)=>e >= 0,\n                        message: \"value must be positive\"\n                    },\n                    {\n                        restriction: (e, t)=>!t.exponential,\n                        message: \"`totalLength` is incompatible with `exponential`\"\n                    }\n                ]\n            },\n            mantissa: {\n                type: \"number\",\n                restriction: (e)=>e >= 0,\n                message: \"value must be positive\"\n            },\n            optionalMantissa: \"boolean\",\n            trimMantissa: \"boolean\",\n            roundingFunction: \"function\",\n            optionalCharacteristic: \"boolean\",\n            thousandSeparated: \"boolean\",\n            spaceSeparated: \"boolean\",\n            spaceSeparatedCurrency: \"boolean\",\n            spaceSeparatedAbbreviation: \"boolean\",\n            abbreviations: {\n                type: \"object\",\n                children: {\n                    thousand: \"string\",\n                    million: \"string\",\n                    billion: \"string\",\n                    trillion: \"string\"\n                }\n            },\n            negative: {\n                type: \"string\",\n                validValues: [\n                    \"sign\",\n                    \"parenthesis\"\n                ]\n            },\n            forceSign: \"boolean\",\n            exponential: {\n                type: \"boolean\"\n            },\n            prefixSymbol: {\n                type: \"boolean\",\n                restriction: (e, t)=>\"percent\" === t.output,\n                message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n            }\n        }, n = {\n            languageTag: {\n                type: \"string\",\n                mandatory: !0,\n                restriction: (e)=>e.match(t),\n                message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n            },\n            delimiters: {\n                type: \"object\",\n                children: {\n                    thousands: \"string\",\n                    decimal: \"string\",\n                    thousandsSize: \"number\"\n                },\n                mandatory: !0\n            },\n            abbreviations: {\n                type: \"object\",\n                children: {\n                    thousand: {\n                        type: \"string\",\n                        mandatory: !0\n                    },\n                    million: {\n                        type: \"string\",\n                        mandatory: !0\n                    },\n                    billion: {\n                        type: \"string\",\n                        mandatory: !0\n                    },\n                    trillion: {\n                        type: \"string\",\n                        mandatory: !0\n                    }\n                },\n                mandatory: !0\n            },\n            spaceSeparated: \"boolean\",\n            spaceSeparatedCurrency: \"boolean\",\n            ordinal: {\n                type: \"function\",\n                mandatory: !0\n            },\n            bytes: {\n                type: \"object\",\n                children: {\n                    binarySuffixes: \"object\",\n                    decimalSuffixes: \"object\"\n                }\n            },\n            currency: {\n                type: \"object\",\n                children: {\n                    symbol: \"string\",\n                    position: \"string\",\n                    code: \"string\"\n                },\n                mandatory: !0\n            },\n            defaults: \"format\",\n            ordinalFormat: \"format\",\n            byteFormat: \"format\",\n            percentageFormat: \"format\",\n            currencyFormat: \"format\",\n            timeDefaults: \"format\",\n            formats: {\n                type: \"object\",\n                children: {\n                    fourDigits: {\n                        type: \"format\",\n                        mandatory: !0\n                    },\n                    fullWithTwoDecimals: {\n                        type: \"format\",\n                        mandatory: !0\n                    },\n                    fullWithTwoDecimalsNoCurrency: {\n                        type: \"format\",\n                        mandatory: !0\n                    },\n                    fullWithNoDecimals: {\n                        type: \"format\",\n                        mandatory: !0\n                    }\n                }\n            }\n        };\n        function o(t) {\n            return void 0 !== e.unformat(t);\n        }\n        function s(e, t, n, i = !1) {\n            let a = Object.keys(e).map((i)=>{\n                if (!t[i]) return console.error(`${n} Invalid key: ${i}`), !1;\n                let a = e[i], o = t[i];\n                if (\"string\" == typeof o && (o = {\n                    type: o\n                }), \"format\" === o.type) {\n                    if (!s(a, r, `[Validate ${i}]`, !0)) return !1;\n                } else if (typeof a !== o.type) return console.error(`${n} ${i} type mismatched: \"${o.type}\" expected, \"${typeof a}\" provided`), !1;\n                if (o.restrictions && o.restrictions.length) {\n                    let t = o.restrictions.length;\n                    for(let r = 0; r < t; r++){\n                        let { restriction: t, message: u } = o.restrictions[r];\n                        if (!t(a, e)) return console.error(`${n} ${i} invalid value: ${u}`), !1;\n                    }\n                }\n                if (o.restriction && !o.restriction(a, e)) return console.error(`${n} ${i} invalid value: ${o.message}`), !1;\n                if (o.validValues && -1 === o.validValues.indexOf(a)) return console.error(`${n} ${i} invalid value: must be among ${JSON.stringify(o.validValues)}, \"${a}\" provided`), !1;\n                if (o.children) {\n                    if (!s(a, o.children, `[Validate ${i}]`)) return !1;\n                }\n                return !0;\n            });\n            return i || a.push(...Object.keys(t).map((r)=>{\n                let i = t[r];\n                if (\"string\" == typeof i && (i = {\n                    type: i\n                }), i.mandatory) {\n                    let t = i.mandatory;\n                    if (\"function\" == typeof t && (t = t(e)), t && void 0 === e[r]) return console.error(`${n} Missing mandatory key \"${r}\"`), !1;\n                }\n                return !0;\n            })), a.reduce((e, t)=>e && t, !0);\n        }\n        function l(e) {\n            return s(e, r, \"[Validate format]\");\n        }\n        return i = {\n            validate: function(e, t) {\n                let r = o(e), n = l(t);\n                return r && n;\n            },\n            validateFormat: l,\n            validateInput: o,\n            validateLanguage: function(e) {\n                return s(e, n, \"[Validate language]\");\n            }\n        }, i;\n    }\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ var l, c, f = {\n        parseFormat: function(e, t = {}) {\n            return \"string\" != typeof e ? e : (function(e, t) {\n                if (-1 === e.indexOf(\"$\")) {\n                    if (-1 === e.indexOf(\"%\")) return -1 !== e.indexOf(\"bd\") ? (t.output = \"byte\", void (t.base = \"general\")) : -1 !== e.indexOf(\"b\") ? (t.output = \"byte\", void (t.base = \"binary\")) : -1 !== e.indexOf(\"d\") ? (t.output = \"byte\", void (t.base = \"decimal\")) : void (-1 === e.indexOf(\":\") ? -1 !== e.indexOf(\"o\") && (t.output = \"ordinal\") : t.output = \"time\");\n                    t.output = \"percent\";\n                } else t.output = \"currency\";\n            }(e = function(e, t) {\n                let r = e.match(/{([^}]*)}$/);\n                return r ? (t.postfix = r[1], e.slice(0, -r[0].length)) : e;\n            }(e = function(e, t) {\n                let r = e.match(/^{([^}]*)}/);\n                return r ? (t.prefix = r[1], e.slice(r[0].length)) : e;\n            }(e, t), t), t), function(e, t) {\n                let r = e.match(/[1-9]+[0-9]*/);\n                r && (t.totalLength = +r[0]);\n            }(e, t), function(e, t) {\n                let r = e.split(\".\")[0].match(/0+/);\n                r && (t.characteristic = r[0].length);\n            }(e, t), function(e, t) {\n                if (-1 !== e.indexOf(\".\")) {\n                    let r = e.split(\".\")[0];\n                    t.optionalCharacteristic = -1 === r.indexOf(\"0\");\n                }\n            }(e, t), function(e, t) {\n                -1 !== e.indexOf(\"a\") && (t.average = !0);\n            }(e, t), function(e, t) {\n                -1 !== e.indexOf(\"K\") ? t.forceAverage = \"thousand\" : -1 !== e.indexOf(\"M\") ? t.forceAverage = \"million\" : -1 !== e.indexOf(\"B\") ? t.forceAverage = \"billion\" : -1 !== e.indexOf(\"T\") && (t.forceAverage = \"trillion\");\n            }(e, t), function(e, t) {\n                let r = e.split(\".\")[1];\n                if (r) {\n                    let e = r.match(/0+/);\n                    e && (t.mantissa = e[0].length);\n                }\n            }(e, t), function(e, t) {\n                e.match(/\\[\\.]/) ? t.optionalMantissa = !0 : e.match(/\\./) && (t.optionalMantissa = !1);\n            }(e, t), function(e, t) {\n                const r = e.split(\".\")[1];\n                r && (t.trimMantissa = -1 !== r.indexOf(\"[\"));\n            }(e, t), function(e, t) {\n                -1 !== e.indexOf(\",\") && (t.thousandSeparated = !0);\n            }(e, t), function(e, t) {\n                -1 !== e.indexOf(\" \") && (t.spaceSeparated = !0, t.spaceSeparatedCurrency = !0, (t.average || t.forceAverage) && (t.spaceSeparatedAbbreviation = !0));\n            }(e, t), function(e, t) {\n                e.match(/^\\+?\\([^)]*\\)$/) && (t.negative = \"parenthesis\"), e.match(/^\\+?-/) && (t.negative = \"sign\");\n            }(e, t), function(e, t) {\n                e.match(/^\\+/) && (t.forceSign = !0);\n            }(e, t), t);\n        }\n    };\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ function p() {\n        if (c) return l;\n        c = 1;\n        const e = o, t = s(), r = f;\n        let n, i = {}, a = {}, u = null, p = {};\n        function g(e) {\n            n = e;\n        }\n        function h() {\n            return a[n];\n        }\n        return i.languages = ()=>Object.assign({}, a), i.currentLanguage = ()=>n, i.currentBytes = ()=>h().bytes || {}, i.currentCurrency = ()=>h().currency, i.currentAbbreviations = ()=>h().abbreviations, i.currentDelimiters = ()=>h().delimiters, i.currentOrdinal = ()=>h().ordinal, i.currentDefaults = ()=>Object.assign({}, h().defaults, p), i.currentOrdinalDefaultFormat = ()=>Object.assign({}, i.currentDefaults(), h().ordinalFormat), i.currentByteDefaultFormat = ()=>Object.assign({}, i.currentDefaults(), h().byteFormat), i.currentPercentageDefaultFormat = ()=>Object.assign({}, i.currentDefaults(), h().percentageFormat), i.currentCurrencyDefaultFormat = ()=>Object.assign({}, i.currentDefaults(), h().currencyFormat), i.currentTimeDefaultFormat = ()=>Object.assign({}, i.currentDefaults(), h().timeFormat), i.setDefaults = (e)=>{\n            e = r.parseFormat(e), t.validateFormat(e) && (p = e);\n        }, i.getZeroFormat = ()=>u, i.setZeroFormat = (e)=>u = \"string\" == typeof e ? e : null, i.hasZeroFormat = ()=>null !== u, i.languageData = (e)=>{\n            if (e) {\n                if (a[e]) return a[e];\n                throw new Error(`Unknown tag \"${e}\"`);\n            }\n            return h();\n        }, i.registerLanguage = (e, r = !1)=>{\n            if (!t.validateLanguage(e)) throw new Error(\"Invalid language data\");\n            a[e.languageTag] = e, r && g(e.languageTag);\n        }, i.setLanguage = (t, r = e.languageTag)=>{\n            if (!a[t]) {\n                let e = t.split(\"-\")[0], n = Object.keys(a).find((t)=>t.split(\"-\")[0] === e);\n                return a[n] ? void g(n) : void g(r);\n            }\n            g(t);\n        }, i.registerLanguage(e), n = e.languageTag, l = i;\n    }\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ function g(e, t) {\n        e.forEach((e)=>{\n            let r;\n            try {\n                r = function(e) {\n                    throw new Error('Could not dynamically require \"' + e + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n                }(`../languages/${e}`);\n            } catch (t) {\n                console.error(`Unable to load \"${e}\". No matching language file found.`);\n            }\n            r && t.registerLanguage(r);\n        });\n    }\n    var h = {\n        exports: {}\n    };\n    !function(t) {\n        !function(e) {\n            var r, n = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i, i = Math.ceil, a = Math.floor, o = \"[BigNumber Error] \", u = o + \"Number primitive has more than 15 significant digits: \", s = 1e14, l = 14, c = 9007199254740991, f = [\n                1,\n                10,\n                100,\n                1e3,\n                1e4,\n                1e5,\n                1e6,\n                1e7,\n                1e8,\n                1e9,\n                1e10,\n                1e11,\n                1e12,\n                1e13\n            ], p = 1e7, g = 1e9;\n            function h(e) {\n                var t = 0 | e;\n                return e > 0 || e === t ? t : t - 1;\n            }\n            function d(e) {\n                for(var t, r, n = 1, i = e.length, a = e[0] + \"\"; n < i;){\n                    for(t = e[n++] + \"\", r = l - t.length; r--; t = \"0\" + t);\n                    a += t;\n                }\n                for(i = a.length; 48 === a.charCodeAt(--i););\n                return a.slice(0, i + 1 || 1);\n            }\n            function m(e, t) {\n                var r, n, i = e.c, a = t.c, o = e.s, u = t.s, s = e.e, l = t.e;\n                if (!o || !u) return null;\n                if (r = i && !i[0], n = a && !a[0], r || n) return r ? n ? 0 : -u : o;\n                if (o != u) return o;\n                if (r = o < 0, n = s == l, !i || !a) return n ? 0 : !i ^ r ? 1 : -1;\n                if (!n) return s > l ^ r ? 1 : -1;\n                for(u = (s = i.length) < (l = a.length) ? s : l, o = 0; o < u; o++)if (i[o] != a[o]) return i[o] > a[o] ^ r ? 1 : -1;\n                return s == l ? 0 : s > l ^ r ? 1 : -1;\n            }\n            function y(e, t, r, n) {\n                if (e < t || e > r || e !== a(e)) throw Error(o + (n || \"Argument\") + (\"number\" == typeof e ? e < t || e > r ? \" out of range: \" : \" not an integer: \" : \" not a primitive number: \") + String(e));\n            }\n            function b(e) {\n                var t = e.c.length - 1;\n                return h(e.e / l) == t && e.c[t] % 2 != 0;\n            }\n            function v(e, t) {\n                return (e.length > 1 ? e.charAt(0) + \".\" + e.slice(1) : e) + (t < 0 ? \"e\" : \"e+\") + t;\n            }\n            function w(e, t, r) {\n                var n, i;\n                if (t < 0) {\n                    for(i = r + \".\"; ++t; i += r);\n                    e = i + e;\n                } else if (++t > (n = e.length)) {\n                    for(i = r, t -= n; --t; i += r);\n                    e += i;\n                } else t < n && (e = e.slice(0, t) + \".\" + e.slice(t));\n                return e;\n            }\n            r = function e(t) {\n                var r, O, x, S, N, $, B, M, D, F, E = q.prototype = {\n                    constructor: q,\n                    toString: null,\n                    valueOf: null\n                }, A = new q(1), _ = 20, k = 4, L = -7, P = 21, T = -1e7, C = 1e7, j = !1, U = 1, R = 0, I = {\n                    prefix: \"\",\n                    groupSize: 3,\n                    secondaryGroupSize: 0,\n                    groupSeparator: \",\",\n                    decimalSeparator: \".\",\n                    fractionGroupSize: 0,\n                    fractionGroupSeparator: \"\\xa0\",\n                    suffix: \"\"\n                }, G = \"0123456789abcdefghijklmnopqrstuvwxyz\", V = !0;\n                function q(e, t) {\n                    var r, i, o, s, f, p, g, h, d = this;\n                    if (!(d instanceof q)) return new q(e, t);\n                    if (null == t) {\n                        if (e && !0 === e._isBigNumber) return d.s = e.s, void (!e.c || e.e > C ? d.c = d.e = null : e.e < T ? d.c = [\n                            d.e = 0\n                        ] : (d.e = e.e, d.c = e.c.slice()));\n                        if ((p = \"number\" == typeof e) && 0 * e == 0) {\n                            if (d.s = 1 / e < 0 ? (e = -e, -1) : 1, e === ~~e) {\n                                for(s = 0, f = e; f >= 10; f /= 10, s++);\n                                return void (s > C ? d.c = d.e = null : (d.e = s, d.c = [\n                                    e\n                                ]));\n                            }\n                            h = String(e);\n                        } else {\n                            if (!n.test(h = String(e))) return x(d, h, p);\n                            d.s = 45 == h.charCodeAt(0) ? (h = h.slice(1), -1) : 1;\n                        }\n                        (s = h.indexOf(\".\")) > -1 && (h = h.replace(\".\", \"\")), (f = h.search(/e/i)) > 0 ? (s < 0 && (s = f), s += +h.slice(f + 1), h = h.substring(0, f)) : s < 0 && (s = h.length);\n                    } else {\n                        if (y(t, 2, G.length, \"Base\"), 10 == t && V) return H(d = new q(e), _ + d.e + 1, k);\n                        if (h = String(e), p = \"number\" == typeof e) {\n                            if (0 * e != 0) return x(d, h, p, t);\n                            if (d.s = 1 / e < 0 ? (h = h.slice(1), -1) : 1, q.DEBUG && h.replace(/^0\\.0*|\\./, \"\").length > 15) throw Error(u + e);\n                        } else d.s = 45 === h.charCodeAt(0) ? (h = h.slice(1), -1) : 1;\n                        for(r = G.slice(0, t), s = f = 0, g = h.length; f < g; f++)if (r.indexOf(i = h.charAt(f)) < 0) {\n                            if (\".\" == i) {\n                                if (f > s) {\n                                    s = g;\n                                    continue;\n                                }\n                            } else if (!o && (h == h.toUpperCase() && (h = h.toLowerCase()) || h == h.toLowerCase() && (h = h.toUpperCase()))) {\n                                o = !0, f = -1, s = 0;\n                                continue;\n                            }\n                            return x(d, String(e), p, t);\n                        }\n                        p = !1, (s = (h = O(h, t, 10, d.s)).indexOf(\".\")) > -1 ? h = h.replace(\".\", \"\") : s = h.length;\n                    }\n                    for(f = 0; 48 === h.charCodeAt(f); f++);\n                    for(g = h.length; 48 === h.charCodeAt(--g););\n                    if (h = h.slice(f, ++g)) {\n                        if (g -= f, p && q.DEBUG && g > 15 && (e > c || e !== a(e))) throw Error(u + d.s * e);\n                        if ((s = s - f - 1) > C) d.c = d.e = null;\n                        else if (s < T) d.c = [\n                            d.e = 0\n                        ];\n                        else {\n                            if (d.e = s, d.c = [], f = (s + 1) % l, s < 0 && (f += l), f < g) {\n                                for(f && d.c.push(+h.slice(0, f)), g -= l; f < g;)d.c.push(+h.slice(f, f += l));\n                                f = l - (h = h.slice(f)).length;\n                            } else f -= g;\n                            for(; f--; h += \"0\");\n                            d.c.push(+h);\n                        }\n                    } else d.c = [\n                        d.e = 0\n                    ];\n                }\n                function Z(e, t, r, n) {\n                    var i, a, o, u, s;\n                    if (null == r ? r = k : y(r, 0, 8), !e.c) return e.toString();\n                    if (i = e.c[0], o = e.e, null == t) s = d(e.c), s = 1 == n || 2 == n && (o <= L || o >= P) ? v(s, o) : w(s, o, \"0\");\n                    else if (a = (e = H(new q(e), t, r)).e, u = (s = d(e.c)).length, 1 == n || 2 == n && (t <= a || a <= L)) {\n                        for(; u < t; s += \"0\", u++);\n                        s = v(s, a);\n                    } else if (t -= o, s = w(s, a, \"0\"), a + 1 > u) {\n                        if (--t > 0) for(s += \".\"; t--; s += \"0\");\n                    } else if ((t += a - u) > 0) for(a + 1 == u && (s += \".\"); t--; s += \"0\");\n                    return e.s < 0 && i ? \"-\" + s : s;\n                }\n                function z(e, t) {\n                    for(var r, n, i = 1, a = new q(e[0]); i < e.length; i++)(!(n = new q(e[i])).s || (r = m(a, n)) === t || 0 === r && a.s === t) && (a = n);\n                    return a;\n                }\n                function W(e, t, r) {\n                    for(var n = 1, i = t.length; !t[--i]; t.pop());\n                    for(i = t[0]; i >= 10; i /= 10, n++);\n                    return (r = n + r * l - 1) > C ? e.c = e.e = null : r < T ? e.c = [\n                        e.e = 0\n                    ] : (e.e = r, e.c = t), e;\n                }\n                function H(e, t, r, n) {\n                    var o, u, c, p, g, h, d, m = e.c, y = f;\n                    if (m) {\n                        e: {\n                            for(o = 1, p = m[0]; p >= 10; p /= 10, o++);\n                            if ((u = t - o) < 0) u += l, c = t, g = m[h = 0], d = a(g / y[o - c - 1] % 10);\n                            else if ((h = i((u + 1) / l)) >= m.length) {\n                                if (!n) break e;\n                                for(; m.length <= h; m.push(0));\n                                g = d = 0, o = 1, c = (u %= l) - l + 1;\n                            } else {\n                                for(g = p = m[h], o = 1; p >= 10; p /= 10, o++);\n                                d = (c = (u %= l) - l + o) < 0 ? 0 : a(g / y[o - c - 1] % 10);\n                            }\n                            if (n = n || t < 0 || null != m[h + 1] || (c < 0 ? g : g % y[o - c - 1]), n = r < 4 ? (d || n) && (0 == r || r == (e.s < 0 ? 3 : 2)) : d > 5 || 5 == d && (4 == r || n || 6 == r && (u > 0 ? c > 0 ? g / y[o - c] : 0 : m[h - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !m[0]) return m.length = 0, n ? (t -= e.e + 1, m[0] = y[(l - t % l) % l], e.e = -t || 0) : m[0] = e.e = 0, e;\n                            if (0 == u ? (m.length = h, p = 1, h--) : (m.length = h + 1, p = y[l - u], m[h] = c > 0 ? a(g / y[o - c] % y[c]) * p : 0), n) for(;;){\n                                if (0 == h) {\n                                    for(u = 1, c = m[0]; c >= 10; c /= 10, u++);\n                                    for(c = m[0] += p, p = 1; c >= 10; c /= 10, p++);\n                                    u != p && (e.e++, m[0] == s && (m[0] = 1));\n                                    break;\n                                }\n                                if (m[h] += p, m[h] != s) break;\n                                m[h--] = 0, p = 1;\n                            }\n                            for(u = m.length; 0 === m[--u]; m.pop());\n                        }\n                        e.e > C ? e.c = e.e = null : e.e < T && (e.c = [\n                            e.e = 0\n                        ]);\n                    }\n                    return e;\n                }\n                function Y(e) {\n                    var t, r = e.e;\n                    return null === r ? e.toString() : (t = d(e.c), t = r <= L || r >= P ? v(t, r) : w(t, r, \"0\"), e.s < 0 ? \"-\" + t : t);\n                }\n                return q.clone = e, q.ROUND_UP = 0, q.ROUND_DOWN = 1, q.ROUND_CEIL = 2, q.ROUND_FLOOR = 3, q.ROUND_HALF_UP = 4, q.ROUND_HALF_DOWN = 5, q.ROUND_HALF_EVEN = 6, q.ROUND_HALF_CEIL = 7, q.ROUND_HALF_FLOOR = 8, q.EUCLID = 9, q.config = q.set = function(e) {\n                    var t, r;\n                    if (null != e) {\n                        if (\"object\" != typeof e) throw Error(o + \"Object expected: \" + e);\n                        if (e.hasOwnProperty(t = \"DECIMAL_PLACES\") && (y(r = e[t], 0, g, t), _ = r), e.hasOwnProperty(t = \"ROUNDING_MODE\") && (y(r = e[t], 0, 8, t), k = r), e.hasOwnProperty(t = \"EXPONENTIAL_AT\") && ((r = e[t]) && r.pop ? (y(r[0], -g, 0, t), y(r[1], 0, g, t), L = r[0], P = r[1]) : (y(r, -g, g, t), L = -(P = r < 0 ? -r : r))), e.hasOwnProperty(t = \"RANGE\")) if ((r = e[t]) && r.pop) y(r[0], -g, -1, t), y(r[1], 1, g, t), T = r[0], C = r[1];\n                        else {\n                            if (y(r, -g, g, t), !r) throw Error(o + t + \" cannot be zero: \" + r);\n                            T = -(C = r < 0 ? -r : r);\n                        }\n                        if (e.hasOwnProperty(t = \"CRYPTO\")) {\n                            if ((r = e[t]) !== !!r) throw Error(o + t + \" not true or false: \" + r);\n                            if (r) {\n                                if (\"undefined\" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw j = !r, Error(o + \"crypto unavailable\");\n                                j = r;\n                            } else j = r;\n                        }\n                        if (e.hasOwnProperty(t = \"MODULO_MODE\") && (y(r = e[t], 0, 9, t), U = r), e.hasOwnProperty(t = \"POW_PRECISION\") && (y(r = e[t], 0, g, t), R = r), e.hasOwnProperty(t = \"FORMAT\")) {\n                            if (\"object\" != typeof (r = e[t])) throw Error(o + t + \" not an object: \" + r);\n                            I = r;\n                        }\n                        if (e.hasOwnProperty(t = \"ALPHABET\")) {\n                            if (\"string\" != typeof (r = e[t]) || /^.?$|[+\\-.\\s]|(.).*\\1/.test(r)) throw Error(o + t + \" invalid: \" + r);\n                            V = \"0123456789\" == r.slice(0, 10), G = r;\n                        }\n                    }\n                    return {\n                        DECIMAL_PLACES: _,\n                        ROUNDING_MODE: k,\n                        EXPONENTIAL_AT: [\n                            L,\n                            P\n                        ],\n                        RANGE: [\n                            T,\n                            C\n                        ],\n                        CRYPTO: j,\n                        MODULO_MODE: U,\n                        POW_PRECISION: R,\n                        FORMAT: I,\n                        ALPHABET: G\n                    };\n                }, q.isBigNumber = function(e) {\n                    if (!e || !0 !== e._isBigNumber) return !1;\n                    if (!q.DEBUG) return !0;\n                    var t, r, n = e.c, i = e.e, u = e.s;\n                    e: if (\"[object Array]\" == ({}).toString.call(n)) {\n                        if ((1 === u || -1 === u) && i >= -g && i <= g && i === a(i)) {\n                            if (0 === n[0]) {\n                                if (0 === i && 1 === n.length) return !0;\n                                break e;\n                            }\n                            if ((t = (i + 1) % l) < 1 && (t += l), String(n[0]).length == t) {\n                                for(t = 0; t < n.length; t++)if ((r = n[t]) < 0 || r >= s || r !== a(r)) break e;\n                                if (0 !== r) return !0;\n                            }\n                        }\n                    } else if (null === n && null === i && (null === u || 1 === u || -1 === u)) return !0;\n                    throw Error(o + \"Invalid BigNumber: \" + e);\n                }, q.maximum = q.max = function() {\n                    return z(arguments, -1);\n                }, q.minimum = q.min = function() {\n                    return z(arguments, 1);\n                }, q.random = (S = 9007199254740992, N = Math.random() * S & 2097151 ? function() {\n                    return a(Math.random() * S);\n                } : function() {\n                    return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);\n                }, function(e) {\n                    var t, r, n, u, s, c = 0, p = [], h = new q(A);\n                    if (null == e ? e = _ : y(e, 0, g), u = i(e / l), j) if (crypto.getRandomValues) {\n                        for(t = crypto.getRandomValues(new Uint32Array(u *= 2)); c < u;)(s = 131072 * t[c] + (t[c + 1] >>> 11)) >= 9e15 ? (r = crypto.getRandomValues(new Uint32Array(2)), t[c] = r[0], t[c + 1] = r[1]) : (p.push(s % 1e14), c += 2);\n                        c = u / 2;\n                    } else {\n                        if (!crypto.randomBytes) throw j = !1, Error(o + \"crypto unavailable\");\n                        for(t = crypto.randomBytes(u *= 7); c < u;)(s = 281474976710656 * (31 & t[c]) + 1099511627776 * t[c + 1] + 4294967296 * t[c + 2] + 16777216 * t[c + 3] + (t[c + 4] << 16) + (t[c + 5] << 8) + t[c + 6]) >= 9e15 ? crypto.randomBytes(7).copy(t, c) : (p.push(s % 1e14), c += 7);\n                        c = u / 7;\n                    }\n                    if (!j) for(; c < u;)(s = N()) < 9e15 && (p[c++] = s % 1e14);\n                    for(u = p[--c], e %= l, u && e && (s = f[l - e], p[c] = a(u / s) * s); 0 === p[c]; p.pop(), c--);\n                    if (c < 0) p = [\n                        n = 0\n                    ];\n                    else {\n                        for(n = -1; 0 === p[0]; p.splice(0, 1), n -= l);\n                        for(c = 1, s = p[0]; s >= 10; s /= 10, c++);\n                        c < l && (n -= l - c);\n                    }\n                    return h.e = n, h.c = p, h;\n                }), q.sum = function() {\n                    for(var e = 1, t = arguments, r = new q(t[0]); e < t.length;)r = r.plus(t[e++]);\n                    return r;\n                }, O = function() {\n                    var e = \"0123456789\";\n                    function t(e, t, r, n) {\n                        for(var i, a, o = [\n                            0\n                        ], u = 0, s = e.length; u < s;){\n                            for(a = o.length; a--; o[a] *= t);\n                            for(o[0] += n.indexOf(e.charAt(u++)), i = 0; i < o.length; i++)o[i] > r - 1 && (null == o[i + 1] && (o[i + 1] = 0), o[i + 1] += o[i] / r | 0, o[i] %= r);\n                        }\n                        return o.reverse();\n                    }\n                    return function(n, i, a, o, u) {\n                        var s, l, c, f, p, g, h, m, y = n.indexOf(\".\"), b = _, v = k;\n                        for(y >= 0 && (f = R, R = 0, n = n.replace(\".\", \"\"), g = (m = new q(i)).pow(n.length - y), R = f, m.c = t(w(d(g.c), g.e, \"0\"), 10, a, e), m.e = m.c.length), c = f = (h = t(n, i, a, u ? (s = G, e) : (s = e, G))).length; 0 == h[--f]; h.pop());\n                        if (!h[0]) return s.charAt(0);\n                        if (y < 0 ? --c : (g.c = h, g.e = c, g.s = o, h = (g = r(g, m, b, v, a)).c, p = g.r, c = g.e), y = h[l = c + b + 1], f = a / 2, p = p || l < 0 || null != h[l + 1], p = v < 4 ? (null != y || p) && (0 == v || v == (g.s < 0 ? 3 : 2)) : y > f || y == f && (4 == v || p || 6 == v && 1 & h[l - 1] || v == (g.s < 0 ? 8 : 7)), l < 1 || !h[0]) n = p ? w(s.charAt(1), -b, s.charAt(0)) : s.charAt(0);\n                        else {\n                            if (h.length = l, p) for(--a; ++h[--l] > a;)h[l] = 0, l || (++c, h = [\n                                1\n                            ].concat(h));\n                            for(f = h.length; !h[--f];);\n                            for(y = 0, n = \"\"; y <= f; n += s.charAt(h[y++]));\n                            n = w(n, c, s.charAt(0));\n                        }\n                        return n;\n                    };\n                }(), r = function() {\n                    function e(e, t, r) {\n                        var n, i, a, o, u = 0, s = e.length, l = t % p, c = t / p | 0;\n                        for(e = e.slice(); s--;)u = ((i = l * (a = e[s] % p) + (n = c * a + (o = e[s] / p | 0) * l) % p * p + u) / r | 0) + (n / p | 0) + c * o, e[s] = i % r;\n                        return u && (e = [\n                            u\n                        ].concat(e)), e;\n                    }\n                    function t(e, t, r, n) {\n                        var i, a;\n                        if (r != n) a = r > n ? 1 : -1;\n                        else for(i = a = 0; i < r; i++)if (e[i] != t[i]) {\n                            a = e[i] > t[i] ? 1 : -1;\n                            break;\n                        }\n                        return a;\n                    }\n                    function r(e, t, r, n) {\n                        for(var i = 0; r--;)e[r] -= i, i = e[r] < t[r] ? 1 : 0, e[r] = i * n + e[r] - t[r];\n                        for(; !e[0] && e.length > 1; e.splice(0, 1));\n                    }\n                    return function(n, i, o, u, c) {\n                        var f, p, g, d, m, y, b, v, w, O, x, S, N, $, B, M, D, F = n.s == i.s ? 1 : -1, E = n.c, A = i.c;\n                        if (!(E && E[0] && A && A[0])) return new q(n.s && i.s && (E ? !A || E[0] != A[0] : A) ? E && 0 == E[0] || !A ? 0 * F : F / 0 : NaN);\n                        for(w = (v = new q(F)).c = [], F = o + (p = n.e - i.e) + 1, c || (c = s, p = h(n.e / l) - h(i.e / l), F = F / l | 0), g = 0; A[g] == (E[g] || 0); g++);\n                        if (A[g] > (E[g] || 0) && p--, F < 0) w.push(1), d = !0;\n                        else {\n                            for($ = E.length, M = A.length, g = 0, F += 2, (m = a(c / (A[0] + 1))) > 1 && (A = e(A, m, c), E = e(E, m, c), M = A.length, $ = E.length), N = M, x = (O = E.slice(0, M)).length; x < M; O[x++] = 0);\n                            D = A.slice(), D = [\n                                0\n                            ].concat(D), B = A[0], A[1] >= c / 2 && B++;\n                            do {\n                                if (m = 0, (f = t(A, O, M, x)) < 0) {\n                                    if (S = O[0], M != x && (S = S * c + (O[1] || 0)), (m = a(S / B)) > 1) for(m >= c && (m = c - 1), b = (y = e(A, m, c)).length, x = O.length; 1 == t(y, O, b, x);)m--, r(y, M < b ? D : A, b, c), b = y.length, f = 1;\n                                    else 0 == m && (f = m = 1), b = (y = A.slice()).length;\n                                    if (b < x && (y = [\n                                        0\n                                    ].concat(y)), r(O, y, x, c), x = O.length, -1 == f) for(; t(A, O, M, x) < 1;)m++, r(O, M < x ? D : A, x, c), x = O.length;\n                                } else 0 === f && (m++, O = [\n                                    0\n                                ]);\n                                w[g++] = m, O[0] ? O[x++] = E[N] || 0 : (O = [\n                                    E[N]\n                                ], x = 1);\n                            }while ((N++ < $ || null != O[0]) && F--);\n                            d = null != O[0], w[0] || w.splice(0, 1);\n                        }\n                        if (c == s) {\n                            for(g = 1, F = w[0]; F >= 10; F /= 10, g++);\n                            H(v, o + (v.e = g + p * l - 1) + 1, u, d);\n                        } else v.e = p, v.r = +d;\n                        return v;\n                    };\n                }(), $ = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i, B = /^([^.]+)\\.$/, M = /^\\.([^.]+)$/, D = /^-?(Infinity|NaN)$/, F = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g, x = function(e, t, r, n) {\n                    var i, a = r ? t : t.replace(F, \"\");\n                    if (D.test(a)) e.s = isNaN(a) ? null : a < 0 ? -1 : 1;\n                    else {\n                        if (!r && (a = a.replace($, function(e, t, r) {\n                            return i = \"x\" == (r = r.toLowerCase()) ? 16 : \"b\" == r ? 2 : 8, n && n != i ? e : t;\n                        }), n && (i = n, a = a.replace(B, \"$1\").replace(M, \"0.$1\")), t != a)) return new q(a, i);\n                        if (q.DEBUG) throw Error(o + \"Not a\" + (n ? \" base \" + n : \"\") + \" number: \" + t);\n                        e.s = null;\n                    }\n                    e.c = e.e = null;\n                }, E.absoluteValue = E.abs = function() {\n                    var e = new q(this);\n                    return e.s < 0 && (e.s = 1), e;\n                }, E.comparedTo = function(e, t) {\n                    return m(this, new q(e, t));\n                }, E.decimalPlaces = E.dp = function(e, t) {\n                    var r, n, i, a = this;\n                    if (null != e) return y(e, 0, g), null == t ? t = k : y(t, 0, 8), H(new q(a), e + a.e + 1, t);\n                    if (!(r = a.c)) return null;\n                    if (n = ((i = r.length - 1) - h(this.e / l)) * l, i = r[i]) for(; i % 10 == 0; i /= 10, n--);\n                    return n < 0 && (n = 0), n;\n                }, E.dividedBy = E.div = function(e, t) {\n                    return r(this, new q(e, t), _, k);\n                }, E.dividedToIntegerBy = E.idiv = function(e, t) {\n                    return r(this, new q(e, t), 0, 1);\n                }, E.exponentiatedBy = E.pow = function(e, t) {\n                    var r, n, u, s, c, f, p, g, h = this;\n                    if ((e = new q(e)).c && !e.isInteger()) throw Error(o + \"Exponent not an integer: \" + Y(e));\n                    if (null != t && (t = new q(t)), c = e.e > 14, !h.c || !h.c[0] || 1 == h.c[0] && !h.e && 1 == h.c.length || !e.c || !e.c[0]) return g = new q(Math.pow(+Y(h), c ? e.s * (2 - b(e)) : +Y(e))), t ? g.mod(t) : g;\n                    if (f = e.s < 0, t) {\n                        if (t.c ? !t.c[0] : !t.s) return new q(NaN);\n                        (n = !f && h.isInteger() && t.isInteger()) && (h = h.mod(t));\n                    } else {\n                        if (e.e > 9 && (h.e > 0 || h.e < -1 || (0 == h.e ? h.c[0] > 1 || c && h.c[1] >= 24e7 : h.c[0] < 8e13 || c && h.c[0] <= 9999975e7))) return s = h.s < 0 && b(e) ? -0 : 0, h.e > -1 && (s = 1 / s), new q(f ? 1 / s : s);\n                        R && (s = i(R / l + 2));\n                    }\n                    for(c ? (r = new q(.5), f && (e.s = 1), p = b(e)) : p = (u = Math.abs(+Y(e))) % 2, g = new q(A);;){\n                        if (p) {\n                            if (!(g = g.times(h)).c) break;\n                            s ? g.c.length > s && (g.c.length = s) : n && (g = g.mod(t));\n                        }\n                        if (u) {\n                            if (0 === (u = a(u / 2))) break;\n                            p = u % 2;\n                        } else if (H(e = e.times(r), e.e + 1, 1), e.e > 14) p = b(e);\n                        else {\n                            if (0 === (u = +Y(e))) break;\n                            p = u % 2;\n                        }\n                        h = h.times(h), s ? h.c && h.c.length > s && (h.c.length = s) : n && (h = h.mod(t));\n                    }\n                    return n ? g : (f && (g = A.div(g)), t ? g.mod(t) : s ? H(g, R, k, undefined) : g);\n                }, E.integerValue = function(e) {\n                    var t = new q(this);\n                    return null == e ? e = k : y(e, 0, 8), H(t, t.e + 1, e);\n                }, E.isEqualTo = E.eq = function(e, t) {\n                    return 0 === m(this, new q(e, t));\n                }, E.isFinite = function() {\n                    return !!this.c;\n                }, E.isGreaterThan = E.gt = function(e, t) {\n                    return m(this, new q(e, t)) > 0;\n                }, E.isGreaterThanOrEqualTo = E.gte = function(e, t) {\n                    return 1 === (t = m(this, new q(e, t))) || 0 === t;\n                }, E.isInteger = function() {\n                    return !!this.c && h(this.e / l) > this.c.length - 2;\n                }, E.isLessThan = E.lt = function(e, t) {\n                    return m(this, new q(e, t)) < 0;\n                }, E.isLessThanOrEqualTo = E.lte = function(e, t) {\n                    return -1 === (t = m(this, new q(e, t))) || 0 === t;\n                }, E.isNaN = function() {\n                    return !this.s;\n                }, E.isNegative = function() {\n                    return this.s < 0;\n                }, E.isPositive = function() {\n                    return this.s > 0;\n                }, E.isZero = function() {\n                    return !!this.c && 0 == this.c[0];\n                }, E.minus = function(e, t) {\n                    var r, n, i, a, o = this, u = o.s;\n                    if (t = (e = new q(e, t)).s, !u || !t) return new q(NaN);\n                    if (u != t) return e.s = -t, o.plus(e);\n                    var c = o.e / l, f = e.e / l, p = o.c, g = e.c;\n                    if (!c || !f) {\n                        if (!p || !g) return p ? (e.s = -t, e) : new q(g ? o : NaN);\n                        if (!p[0] || !g[0]) return g[0] ? (e.s = -t, e) : new q(p[0] ? o : 3 == k ? -0 : 0);\n                    }\n                    if (c = h(c), f = h(f), p = p.slice(), u = c - f) {\n                        for((a = u < 0) ? (u = -u, i = p) : (f = c, i = g), i.reverse(), t = u; t--; i.push(0));\n                        i.reverse();\n                    } else for(n = (a = (u = p.length) < (t = g.length)) ? u : t, u = t = 0; t < n; t++)if (p[t] != g[t]) {\n                        a = p[t] < g[t];\n                        break;\n                    }\n                    if (a && (i = p, p = g, g = i, e.s = -e.s), (t = (n = g.length) - (r = p.length)) > 0) for(; t--; p[r++] = 0);\n                    for(t = s - 1; n > u;){\n                        if (p[--n] < g[n]) {\n                            for(r = n; r && !p[--r]; p[r] = t);\n                            --p[r], p[n] += s;\n                        }\n                        p[n] -= g[n];\n                    }\n                    for(; 0 == p[0]; p.splice(0, 1), --f);\n                    return p[0] ? W(e, p, f) : (e.s = 3 == k ? -1 : 1, e.c = [\n                        e.e = 0\n                    ], e);\n                }, E.modulo = E.mod = function(e, t) {\n                    var n, i, a = this;\n                    return e = new q(e, t), !a.c || !e.s || e.c && !e.c[0] ? new q(NaN) : !e.c || a.c && !a.c[0] ? new q(a) : (9 == U ? (i = e.s, e.s = 1, n = r(a, e, 0, 3), e.s = i, n.s *= i) : n = r(a, e, 0, U), (e = a.minus(n.times(e))).c[0] || 1 != U || (e.s = a.s), e);\n                }, E.multipliedBy = E.times = function(e, t) {\n                    var r, n, i, a, o, u, c, f, g, d, m, y, b, v, w, O = this, x = O.c, S = (e = new q(e, t)).c;\n                    if (!(x && S && x[0] && S[0])) return !O.s || !e.s || x && !x[0] && !S || S && !S[0] && !x ? e.c = e.e = e.s = null : (e.s *= O.s, x && S ? (e.c = [\n                        0\n                    ], e.e = 0) : e.c = e.e = null), e;\n                    for(n = h(O.e / l) + h(e.e / l), e.s *= O.s, (c = x.length) < (d = S.length) && (b = x, x = S, S = b, i = c, c = d, d = i), i = c + d, b = []; i--; b.push(0));\n                    for(v = s, w = p, i = d; --i >= 0;){\n                        for(r = 0, m = S[i] % w, y = S[i] / w | 0, a = i + (o = c); a > i;)r = ((f = m * (f = x[--o] % w) + (u = y * f + (g = x[o] / w | 0) * m) % w * w + b[a] + r) / v | 0) + (u / w | 0) + y * g, b[a--] = f % v;\n                        b[a] = r;\n                    }\n                    return r ? ++n : b.splice(0, 1), W(e, b, n);\n                }, E.negated = function() {\n                    var e = new q(this);\n                    return e.s = -e.s || null, e;\n                }, E.plus = function(e, t) {\n                    var r, n = this, i = n.s;\n                    if (t = (e = new q(e, t)).s, !i || !t) return new q(NaN);\n                    if (i != t) return e.s = -t, n.minus(e);\n                    var a = n.e / l, o = e.e / l, u = n.c, c = e.c;\n                    if (!a || !o) {\n                        if (!u || !c) return new q(i / 0);\n                        if (!u[0] || !c[0]) return c[0] ? e : new q(u[0] ? n : 0 * i);\n                    }\n                    if (a = h(a), o = h(o), u = u.slice(), i = a - o) {\n                        for(i > 0 ? (o = a, r = c) : (i = -i, r = u), r.reverse(); i--; r.push(0));\n                        r.reverse();\n                    }\n                    for((i = u.length) - (t = c.length) < 0 && (r = c, c = u, u = r, t = i), i = 0; t;)i = (u[--t] = u[t] + c[t] + i) / s | 0, u[t] = s === u[t] ? 0 : u[t] % s;\n                    return i && (u = [\n                        i\n                    ].concat(u), ++o), W(e, u, o);\n                }, E.precision = E.sd = function(e, t) {\n                    var r, n, i, a = this;\n                    if (null != e && e !== !!e) return y(e, 1, g), null == t ? t = k : y(t, 0, 8), H(new q(a), e, t);\n                    if (!(r = a.c)) return null;\n                    if (n = (i = r.length - 1) * l + 1, i = r[i]) {\n                        for(; i % 10 == 0; i /= 10, n--);\n                        for(i = r[0]; i >= 10; i /= 10, n++);\n                    }\n                    return e && a.e + 1 > n && (n = a.e + 1), n;\n                }, E.shiftedBy = function(e) {\n                    return y(e, -9007199254740991, c), this.times(\"1e\" + e);\n                }, E.squareRoot = E.sqrt = function() {\n                    var e, t, n, i, a, o = this, u = o.c, s = o.s, l = o.e, c = _ + 4, f = new q(\"0.5\");\n                    if (1 !== s || !u || !u[0]) return new q(!s || s < 0 && (!u || u[0]) ? NaN : u ? o : 1 / 0);\n                    if (0 == (s = Math.sqrt(+Y(o))) || s == 1 / 0 ? (((t = d(u)).length + l) % 2 == 0 && (t += \"0\"), s = Math.sqrt(+t), l = h((l + 1) / 2) - (l < 0 || l % 2), n = new q(t = s == 1 / 0 ? \"5e\" + l : (t = s.toExponential()).slice(0, t.indexOf(\"e\") + 1) + l)) : n = new q(s + \"\"), n.c[0]) {\n                        for((s = (l = n.e) + c) < 3 && (s = 0);;)if (a = n, n = f.times(a.plus(r(o, a, c, 1))), d(a.c).slice(0, s) === (t = d(n.c)).slice(0, s)) {\n                            if (n.e < l && --s, \"9999\" != (t = t.slice(s - 3, s + 1)) && (i || \"4999\" != t)) {\n                                +t && (+t.slice(1) || \"5\" != t.charAt(0)) || (H(n, n.e + _ + 2, 1), e = !n.times(n).eq(o));\n                                break;\n                            }\n                            if (!i && (H(a, a.e + _ + 2, 0), a.times(a).eq(o))) {\n                                n = a;\n                                break;\n                            }\n                            c += 4, s += 4, i = 1;\n                        }\n                    }\n                    return H(n, n.e + _ + 1, k, e);\n                }, E.toExponential = function(e, t) {\n                    return null != e && (y(e, 0, g), e++), Z(this, e, t, 1);\n                }, E.toFixed = function(e, t) {\n                    return null != e && (y(e, 0, g), e = e + this.e + 1), Z(this, e, t);\n                }, E.toFormat = function(e, t, r) {\n                    var n, i = this;\n                    if (null == r) null != e && t && \"object\" == typeof t ? (r = t, t = null) : e && \"object\" == typeof e ? (r = e, e = t = null) : r = I;\n                    else if (\"object\" != typeof r) throw Error(o + \"Argument not an object: \" + r);\n                    if (n = i.toFixed(e, t), i.c) {\n                        var a, u = n.split(\".\"), s = +r.groupSize, l = +r.secondaryGroupSize, c = r.groupSeparator || \"\", f = u[0], p = u[1], g = i.s < 0, h = g ? f.slice(1) : f, d = h.length;\n                        if (l && (a = s, s = l, l = a, d -= a), s > 0 && d > 0) {\n                            for(a = d % s || s, f = h.substr(0, a); a < d; a += s)f += c + h.substr(a, s);\n                            l > 0 && (f += c + h.slice(a)), g && (f = \"-\" + f);\n                        }\n                        n = p ? f + (r.decimalSeparator || \"\") + ((l = +r.fractionGroupSize) ? p.replace(new RegExp(\"\\\\d{\" + l + \"}\\\\B\", \"g\"), \"$&\" + (r.fractionGroupSeparator || \"\")) : p) : f;\n                    }\n                    return (r.prefix || \"\") + n + (r.suffix || \"\");\n                }, E.toFraction = function(e) {\n                    var t, n, i, a, u, s, c, p, g, h, m, y, b = this, v = b.c;\n                    if (null != e && (!(c = new q(e)).isInteger() && (c.c || 1 !== c.s) || c.lt(A))) throw Error(o + \"Argument \" + (c.isInteger() ? \"out of range: \" : \"not an integer: \") + Y(c));\n                    if (!v) return new q(b);\n                    for(t = new q(A), g = n = new q(A), i = p = new q(A), y = d(v), u = t.e = y.length - b.e - 1, t.c[0] = f[(s = u % l) < 0 ? l + s : s], e = !e || c.comparedTo(t) > 0 ? u > 0 ? t : g : c, s = C, C = 1 / 0, c = new q(y), p.c[0] = 0; h = r(c, t, 0, 1), 1 != (a = n.plus(h.times(i))).comparedTo(e);)n = i, i = a, g = p.plus(h.times(a = g)), p = a, t = c.minus(h.times(a = t)), c = a;\n                    return a = r(e.minus(n), i, 0, 1), p = p.plus(a.times(g)), n = n.plus(a.times(i)), p.s = g.s = b.s, m = r(g, i, u *= 2, k).minus(b).abs().comparedTo(r(p, n, u, k).minus(b).abs()) < 1 ? [\n                        g,\n                        i\n                    ] : [\n                        p,\n                        n\n                    ], C = s, m;\n                }, E.toNumber = function() {\n                    return +Y(this);\n                }, E.toPrecision = function(e, t) {\n                    return null != e && y(e, 1, g), Z(this, e, t, 2);\n                }, E.toString = function(e) {\n                    var t, r = this, n = r.s, i = r.e;\n                    return null === i ? n ? (t = \"Infinity\", n < 0 && (t = \"-\" + t)) : t = \"NaN\" : (null == e ? t = i <= L || i >= P ? v(d(r.c), i) : w(d(r.c), i, \"0\") : 10 === e && V ? t = w(d((r = H(new q(r), _ + i + 1, k)).c), r.e, \"0\") : (y(e, 2, G.length, \"Base\"), t = O(w(d(r.c), i, \"0\"), 10, e, n, !0)), n < 0 && r.c[0] && (t = \"-\" + t)), t;\n                }, E.valueOf = E.toJSON = function() {\n                    return Y(this);\n                }, E._isBigNumber = !0, null != t && q.set(t), q;\n            }(), r.default = r.BigNumber = r, t.exports ? t.exports = r : (e || (e = \"undefined\" != typeof self && self ? self : window), e.BigNumber = r);\n        }(e);\n    }(h);\n    var d = h.exports;\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ const m = p(), y = s(), b = f, v = d, w = {\n        trillion: Math.pow(10, 12),\n        billion: Math.pow(10, 9),\n        million: Math.pow(10, 6),\n        thousand: Math.pow(10, 3)\n    }, O = {\n        totalLength: 0,\n        characteristic: 0,\n        forceAverage: !1,\n        average: !1,\n        mantissa: -1,\n        optionalMantissa: !0,\n        thousandSeparated: !1,\n        spaceSeparated: !1,\n        negative: \"sign\",\n        forceSign: !1,\n        roundingFunction: Math.round,\n        spaceSeparatedAbbreviation: !1\n    }, { binarySuffixes: x, decimalSuffixes: S } = m.currentBytes(), N = {\n        general: {\n            scale: 1024,\n            suffixes: S,\n            marker: \"bd\"\n        },\n        binary: {\n            scale: 1024,\n            suffixes: x,\n            marker: \"b\"\n        },\n        decimal: {\n            scale: 1e3,\n            suffixes: S,\n            marker: \"d\"\n        }\n    };\n    function $(e, t = {}, r) {\n        if (\"string\" == typeof t && (t = b.parseFormat(t)), !y.validateFormat(t)) return \"ERROR: invalid format\";\n        let n = t.prefix || \"\", i = t.postfix || \"\", a = function(e, t, r) {\n            switch(t.output){\n                case \"currency\":\n                    return function(e, t, r) {\n                        const n = r.currentCurrency();\n                        let i, a = Object.assign({}, t), o = Object.assign({}, O, a), u = \"\", s = !!o.totalLength || !!o.forceAverage || o.average, l = a.currencyPosition || n.position, c = a.currencySymbol || n.symbol;\n                        const f = void 0 !== o.spaceSeparatedCurrency ? o.spaceSeparatedCurrency : o.spaceSeparated;\n                        void 0 === a.lowPrecision && (a.lowPrecision = !1);\n                        f && (u = \" \");\n                        \"infix\" === l && (i = u + c + u);\n                        let p = F({\n                            instance: e,\n                            providedFormat: a,\n                            state: r,\n                            decimalSeparator: i\n                        });\n                        \"prefix\" === l && (p = e._value < 0 && \"sign\" === o.negative ? `-${u}${c}${p.slice(1)}` : e._value > 0 && o.forceSign ? `+${u}${c}${p.slice(1)}` : c + u + p);\n                        l && \"postfix\" !== l || (u = !o.spaceSeparatedAbbreviation && s ? \"\" : u, p = p + u + c);\n                        return p;\n                    }(e, t = E(t, m.currentCurrencyDefaultFormat()), m);\n                case \"percent\":\n                    return function(e, t, r, n) {\n                        let i = t.prefixSymbol, a = F({\n                            instance: n(100 * e._value),\n                            providedFormat: t,\n                            state: r\n                        }), o = Object.assign({}, O, t);\n                        if (i) return `%${o.spaceSeparated ? \" \" : \"\"}${a}`;\n                        return `${a}${o.spaceSeparated ? \" \" : \"\"}%`;\n                    }(e, t = E(t, m.currentPercentageDefaultFormat()), m, r);\n                case \"byte\":\n                    return function(e, t, r, n) {\n                        let i = t.base || \"binary\", a = Object.assign({}, O, t);\n                        const { binarySuffixes: o, decimalSuffixes: u } = r.currentBytes();\n                        let s = {\n                            general: {\n                                scale: 1024,\n                                suffixes: u || S,\n                                marker: \"bd\"\n                            },\n                            binary: {\n                                scale: 1024,\n                                suffixes: o || x,\n                                marker: \"b\"\n                            },\n                            decimal: {\n                                scale: 1e3,\n                                suffixes: u || S,\n                                marker: \"d\"\n                            }\n                        }[i], { value: l, suffix: c } = B(e._value, s.suffixes, s.scale), f = F({\n                            instance: n(l),\n                            providedFormat: t,\n                            state: r,\n                            defaults: r.currentByteDefaultFormat()\n                        });\n                        return `${f}${a.spaceSeparated ? \" \" : \"\"}${c}`;\n                    }(e, t = E(t, m.currentByteDefaultFormat()), m, r);\n                case \"time\":\n                    return t = E(t, m.currentTimeDefaultFormat()), function(e) {\n                        let t = Math.floor(e._value / 60 / 60), r = Math.floor((e._value - 60 * t * 60) / 60), n = Math.round(e._value - 60 * t * 60 - 60 * r);\n                        return `${t}:${r < 10 ? \"0\" : \"\"}${r}:${n < 10 ? \"0\" : \"\"}${n}`;\n                    }(e);\n                case \"ordinal\":\n                    return function(e, t, r) {\n                        let n = r.currentOrdinal(), i = Object.assign({}, O, t), a = F({\n                            instance: e,\n                            providedFormat: t,\n                            state: r\n                        }), o = n(e._value);\n                        return `${a}${i.spaceSeparated ? \" \" : \"\"}${o}`;\n                    }(e, t = E(t, m.currentOrdinalDefaultFormat()), m);\n                default:\n                    return F({\n                        instance: e,\n                        providedFormat: t,\n                        numbro: r\n                    });\n            }\n        }(e, t, r);\n        return a = function(e, t) {\n            return t + e;\n        }(a, n), a = function(e, t) {\n            return e + t;\n        }(a, i), a;\n    }\n    function B(e, t, r) {\n        let n = t[0], i = Math.abs(e);\n        if (i >= r) {\n            for(let a = 1; a < t.length; ++a){\n                let o = Math.pow(r, a), u = Math.pow(r, a + 1);\n                if (i >= o && i < u) {\n                    n = t[a], e /= o;\n                    break;\n                }\n            }\n            n === t[0] && (e /= Math.pow(r, t.length - 1), n = t[t.length - 1]);\n        }\n        return {\n            value: e,\n            suffix: n\n        };\n    }\n    function M(e) {\n        let t = \"\";\n        for(let r = 0; r < e; r++)t += \"0\";\n        return t;\n    }\n    function D(e, t, r = Math.round) {\n        if (-1 !== e.toString().indexOf(\"e\")) return function(e, t) {\n            let r = e.toString(), [n, i] = r.split(\"e\"), [a, o = \"\"] = n.split(\".\");\n            if (+i > 0) r = a + o + M(i - o.length);\n            else {\n                let e = \".\";\n                e = +a < 0 ? `-0${e}` : `0${e}`;\n                let n = (M(-i - 1) + Math.abs(a) + o).substr(0, t);\n                n.length < t && (n += M(t - n.length)), r = e + n;\n            }\n            return +i > 0 && t > 0 && (r += `.${M(t)}`), r;\n        }(e, t);\n        return new v(r(+`${e}e+${t}`) / Math.pow(10, t)).toFixed(t);\n    }\n    function F({ instance: e, providedFormat: t, state: r = m, decimalSeparator: n, defaults: i = r.currentDefaults() }) {\n        let a = e._value;\n        if (0 === a && r.hasZeroFormat()) return r.getZeroFormat();\n        if (!isFinite(a)) return a.toString();\n        let o = Object.assign({}, O, i, t), u = o.totalLength, s = u ? 0 : o.characteristic, l = o.optionalCharacteristic, c = o.forceAverage, f = o.lowPrecision, p = !!u || !!c || o.average, g = u ? -1 : p && void 0 === t.mantissa ? 0 : o.mantissa, h = !u && (void 0 === t.optionalMantissa ? -1 === g : o.optionalMantissa), d = o.trimMantissa, y = o.thousandSeparated, b = o.spaceSeparated, v = o.negative, x = o.forceSign, S = o.exponential, N = o.roundingFunction, $ = \"\";\n        if (p) {\n            let e = function({ value: e, forceAverage: t, lowPrecision: r = !0, abbreviations: n, spaceSeparated: i = !1, totalLength: a = 0, roundingFunction: o = Math.round }) {\n                let u = \"\", s = Math.abs(e), l = -1;\n                if (t && n[t] && w[t] ? (u = n[t], e /= w[t]) : s >= w.trillion || r && 1 === o(s / w.trillion) ? (u = n.trillion, e /= w.trillion) : s < w.trillion && s >= w.billion || r && 1 === o(s / w.billion) ? (u = n.billion, e /= w.billion) : s < w.billion && s >= w.million || r && 1 === o(s / w.million) ? (u = n.million, e /= w.million) : (s < w.million && s >= w.thousand || r && 1 === o(s / w.thousand)) && (u = n.thousand, e /= w.thousand), u && (u = (i ? \" \" : \"\") + u), a) {\n                    let t = e < 0, r = e.toString().split(\".\")[0], n = t ? r.length - 1 : r.length;\n                    l = Math.max(a - n, 0);\n                }\n                return {\n                    value: e,\n                    abbreviation: u,\n                    mantissaPrecision: l\n                };\n            }({\n                value: a,\n                forceAverage: c,\n                lowPrecision: f,\n                abbreviations: r.currentAbbreviations(),\n                spaceSeparated: b,\n                roundingFunction: N,\n                totalLength: u\n            });\n            a = e.value, $ += e.abbreviation, u && (g = e.mantissaPrecision);\n        }\n        if (S) {\n            let e = function({ value: e, characteristicPrecision: t }) {\n                let [r, n] = e.toExponential().split(\"e\"), i = +r;\n                return t ? (1 < t && (i *= Math.pow(10, t - 1), n = +n - (t - 1), n = n >= 0 ? `+${n}` : n), {\n                    value: i,\n                    abbreviation: `e${n}`\n                }) : {\n                    value: i,\n                    abbreviation: `e${n}`\n                };\n            }({\n                value: a,\n                characteristicPrecision: s\n            });\n            a = e.value, $ = e.abbreviation + $;\n        }\n        let B = function(e, t, r, n, i, a) {\n            if (-1 === n) return e;\n            let o = D(t, n, a), [u, s = \"\"] = o.toString().split(\".\");\n            if (s.match(/^0+$/) && (r || i)) return u;\n            let l = s.match(/0+$/);\n            return i && l ? `${u}.${s.toString().slice(0, l.index)}` : o.toString();\n        }(a.toString(), a, h, g, d, N);\n        return B = function(e, t, r, n) {\n            let i = e, [a, o] = i.toString().split(\".\");\n            if (a.match(/^-?0$/) && r) return o ? `${a.replace(\"0\", \"\")}.${o}` : a.replace(\"0\", \"\");\n            const u = t < 0 && 0 === a.indexOf(\"-\");\n            if (u && (a = a.slice(1), i = i.slice(1)), a.length < n) {\n                let e = n - a.length;\n                for(let t = 0; t < e; t++)i = `0${i}`;\n            }\n            return u && (i = `-${i}`), i.toString();\n        }(B, a, l, s), B = function(e, t, r, n, i) {\n            let a = n.currentDelimiters(), o = a.thousands;\n            i = i || a.decimal;\n            let u = a.thousandsSize || 3, s = e.toString(), l = s.split(\".\")[0], c = s.split(\".\")[1];\n            const f = t < 0 && 0 === l.indexOf(\"-\");\n            if (r) {\n                f && (l = l.slice(1));\n                let e = function(e, t) {\n                    let r = [], n = 0;\n                    for(let i = e; i > 0; i--)n === t && (r.unshift(i), n = 0), n++;\n                    return r;\n                }(l.length, u);\n                e.forEach((e, t)=>{\n                    l = l.slice(0, e + t) + o + l.slice(e + t);\n                }), f && (l = `-${l}`);\n            }\n            return s = c ? l + i + c : l, s;\n        }(B, a, y, r, n), (p || S) && (B = function(e, t) {\n            return e + t;\n        }(B, $)), (x || a < 0) && (B = function(e, t, r) {\n            return 0 === t ? e : 0 == +e ? e.replace(\"-\", \"\") : t > 0 ? `+${e}` : \"sign\" === r ? e : `(${e.replace(\"-\", \"\")})`;\n        }(B, a, v)), B;\n    }\n    function E(e, t) {\n        if (!e) return t;\n        let r = Object.keys(e);\n        return 1 === r.length && \"output\" === r[0] ? t : e;\n    }\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ const A = d;\n    function _(e, t, r) {\n        let n = new A(e._value), i = t;\n        return r.isNumbro(t) && (i = t._value), i = new A(i), e._value = n.minus(i).toNumber(), e;\n    }\n    /*!\n\t * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t * SOFTWARE.\n\t */ const k = p(), L = s(), P = ((e)=>({\n            loadLanguagesInNode: (t)=>g(t, e)\n        }))(G), T = u();\n    let C = ((e)=>({\n            format: (...t)=>$(...t, e),\n            getByteUnit: (...t)=>(function(e) {\n                    let t = N.general;\n                    return B(e._value, t.suffixes, t.scale).suffix;\n                })(...t, e),\n            getBinaryByteUnit: (...t)=>(function(e) {\n                    let t = N.binary;\n                    return B(e._value, t.suffixes, t.scale).suffix;\n                })(...t, e),\n            getDecimalByteUnit: (...t)=>(function(e) {\n                    let t = N.decimal;\n                    return B(e._value, t.suffixes, t.scale).suffix;\n                })(...t, e),\n            formatOrDefault: E\n        }))(G), j = ((e)=>({\n            add: (t, r)=>(function(e, t, r) {\n                    let n = new A(e._value), i = t;\n                    return r.isNumbro(t) && (i = t._value), i = new A(i), e._value = n.plus(i).toNumber(), e;\n                })(t, r, e),\n            subtract: (t, r)=>_(t, r, e),\n            multiply: (t, r)=>(function(e, t, r) {\n                    let n = new A(e._value), i = t;\n                    return r.isNumbro(t) && (i = t._value), i = new A(i), e._value = n.times(i).toNumber(), e;\n                })(t, r, e),\n            divide: (t, r)=>(function(e, t, r) {\n                    let n = new A(e._value), i = t;\n                    return r.isNumbro(t) && (i = t._value), i = new A(i), e._value = n.dividedBy(i).toNumber(), e;\n                })(t, r, e),\n            set: (t, r)=>(function(e, t, r) {\n                    let n = t;\n                    return r.isNumbro(t) && (n = t._value), e._value = n, e;\n                })(t, r, e),\n            difference: (t, r)=>(function(e, t, r) {\n                    let n = r(e._value);\n                    return _(n, t, r), Math.abs(n._value);\n                })(t, r, e),\n            BigNumber: A\n        }))(G);\n    const U = f;\n    class R {\n        constructor(e){\n            this._value = e;\n        }\n        clone() {\n            return G(this._value);\n        }\n        format(e = {}) {\n            return C.format(this, e);\n        }\n        formatCurrency(e) {\n            return \"string\" == typeof e && (e = U.parseFormat(e)), (e = C.formatOrDefault(e, k.currentCurrencyDefaultFormat())).output = \"currency\", C.format(this, e);\n        }\n        formatTime(e = {}) {\n            return e.output = \"time\", C.format(this, e);\n        }\n        binaryByteUnits() {\n            return C.getBinaryByteUnit(this);\n        }\n        decimalByteUnits() {\n            return C.getDecimalByteUnit(this);\n        }\n        byteUnits() {\n            return C.getByteUnit(this);\n        }\n        difference(e) {\n            return j.difference(this, e);\n        }\n        add(e) {\n            return j.add(this, e);\n        }\n        subtract(e) {\n            return j.subtract(this, e);\n        }\n        multiply(e) {\n            return j.multiply(this, e);\n        }\n        divide(e) {\n            return j.divide(this, e);\n        }\n        set(e) {\n            return j.set(this, I(e));\n        }\n        value() {\n            return this._value;\n        }\n        valueOf() {\n            return this._value;\n        }\n    }\n    function I(e) {\n        let t = e;\n        return G.isNumbro(e) ? t = e._value : \"string\" == typeof e ? t = G.unformat(e) : isNaN(e) && (t = NaN), t;\n    }\n    function G(e) {\n        return new R(I(e));\n    }\n    return G.version = \"2.4.0\", G.isNumbro = function(e) {\n        return e instanceof R;\n    }, G.language = k.currentLanguage, G.registerLanguage = k.registerLanguage, G.setLanguage = k.setLanguage, G.languages = k.languages, G.languageData = k.languageData, G.zeroFormat = k.setZeroFormat, G.defaultFormat = k.currentDefaults, G.setDefaults = k.setDefaults, G.defaultCurrencyFormat = k.currentCurrencyDefaultFormat, G.validate = L.validate, G.loadLanguagesInNode = P.loadLanguagesInNode, G.unformat = T.unformat, G.BigNumber = j.BigNumber, t(G);\n}); //# sourceMappingURL=numbro.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/numbro@2.4.0/node_modules/numbro/dist/numbro.min.js\n");

/***/ })

};
;